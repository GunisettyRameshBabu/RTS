@model SCTimeSheet_DAL.Models.ProjectListEdit
@{
    /**/

    /**/

    /**/

    /**/

    ViewBag.Title = "Project Edit";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .dataTables_wrapper .pagination {
        float: right !important;
    }
</style>

<div class="card-body" style="background-color: #fff;border-radius:10px;">
    @using (Html.BeginForm("UpdateProject", "ProjectMaster", new { @id = "CNform" }))
    {
        <div>
            @*style="overflow:scroll;"*@
            @Html.HiddenFor(x => x.ProjectID)
            @Html.HiddenFor(x => x.EmployeeProjectList)
            <table class="customers" id="MYtest">
                <tr>
                    <td>
                        Project Name:
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.ProjectName, new { @class = "form-control", style = "width: 100%; border-radius: 9px;", @required = "required" })
                    </td>
                </tr>
                <tr>
                    <td>
                        Project Code:
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.ProjectCode, new { @class = "form-control", style = "width: 100%; border-radius: 9px;", @required = "required" })
                    </td>
                </tr>
                <tr>
                    <td>
                        Cost Centre Code:
                    </td>
                    <td>
                        @*@Html.TextBoxFor(model => model.CostCentre, new { @class = "form-control", style = "width: 100%; border-radius: 9px;" })*@
                        @Html.DropDownListFor(model => model.CostCentre, new SelectList(ViewBag.costList, "CostID", "CostName"), "--Select Any--", new { @required = "required", @class = "form-control select2", style = "width: 100%;" })

                    </td>
                </tr>
                <tr>
                    <td>
                        IO No:
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.InternalOrder, new { @class = "form-control", style = "width: 100%; border-radius: 9px;", @required = "required" })
                    </td>
                </tr>
                <tr>
                    <td>
                        Grant Type:
                    </td>
                    <td>
                        @Html.DropDownListFor(model => model.ProjectGrant, new SelectList(ViewBag.GrantList, "MstID", "MstCode"),
                       "--Select Any--", new { @onchange = "onGrantChange()", @id = "drpgrant", @class = "form-control select2", style = "width: 100%; border-radius: 9px;", @required = "required" })
                        @Html.ValidationMessageFor(model => model.ProjectGrant, "", new { @class = "text-danger" })
                    </td>
                </tr>
                <tr id="drpTheme">
                    <td>
                        Theme:
                    </td>
                    <td>

                        @Html.DropDownListFor(model => model.Theme, new SelectList(ViewBag.ThemeList, "MstID", "MstCode"), "--Select Any--", new { @id = "drptheme", @class = "form-control select2", style = "width: 100%; border-radius: 9px;" })
                        @Html.ValidationMessageFor(model => model.Theme, "", new { @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <td>
                        R&D Projects:
                    </td>
                    <td>
                        @if (Model.IsRDProject == 1)
                        {
                            <label>@Html.RadioButtonFor(model => model.IsRDProject, 1, new { @id = "Rbtest", name = "rndD", @checked = "checked", @onclick = "GetSelectedItem();" })Yes</label>
                            <label>@Html.RadioButtonFor(model => model.IsRDProject, 2, new { @id = "Rbtest", name = "rndD", @onclick = "GetSelectedItem();" })No</label>
                        }
                        else
                        {
                            <label>@Html.RadioButtonFor(model => model.IsRDProject, 1, new { @id = "Rbtest", name = "rndD", @onclick = "GetSelectedItem();" })Yes</label>
                            <label>@Html.RadioButtonFor(model => model.IsRDProject, 2, new { @id = "Rbtest", name = "rndD", @checked = "checked", @onclick = "GetSelectedItem();" })No</label>
                        }
                        @Html.HiddenFor(x => x.IsRDProject)
                    </td>
                </tr>
                <tr id="row1">
                    <td>
                        Research Area:
                    </td>
                    <td>
                        @Html.DropDownListFor(model => model.ResearchArea, new SelectList(ViewBag.ResearchList, "RsID", "RsDesc"), "--Select Any--", new { @id = "research", @class = "form-control select2", style = "width: 100%; border-radius: 9px;" })
                        @Html.ValidationMessageFor(model => model.ResearchArea, "", new { @class = "text-danger" })
                    </td>
                </tr>
                <tr id="row2">
                    <td>
                        Type of Research:
                    </td>
                    <td>
                        @Html.DropDownListFor(model => model.TypeofResearch, new SelectList(ViewBag.ResearchTypeList, "MstID", "MstCode"), "--Select Any--", new { @id = "type", @class = "form-control select2", style = "width: 100%; border-radius: 9px;" })
                        @Html.ValidationMessageFor(model => model.TypeofResearch, "", new { @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <td>
                        Project Start Date:
                    </td>
                    <td>
                        @(Html.Kendo().DatePicker()
                                                                                                                                                                                             .Name("StartDate")
                                                                                                                                                                                              .Events(e =>
                                                                                                                                                                 {
                                                                                                                                                                     e.Change("onStartDateChange");
                                                                                                                                                                 })
                                                                                                                                                                                             .Format("dd MMM yyyy")
                                                                                                                                                                                             .HtmlAttributes(new { required = "Required", @id = "txtstartdate", style = "width: 50%; border-radius: 9px;display: inline-block;" })
                        )
                        <button type="button" class="btn btn-success" id="btnProjectStartDate" style="background-color: #00664E;border-color: #00664E;" onclick="SetProjectStartDate(); return false;">Default</button>
                        @*@Html.TextBoxFor(model => model.StartDate, "{0:dd MMM yyyy}", new { @class = "form-control datepicker", @readonly = "readonly", style = "width: 100%; border-radius: 9px;" })*@
                    </td>
                </tr>
                <tr>
                    <td>
                        Project End Date:
                    </td>
                    <td>
                        @(Html.Kendo().DatePicker()
                                                                                                                                                                                                   .Name("EndDate")
                                                                                                                                                   .Events(e =>
                                                                                                                                                   {
                                                                                                                                                       e.Change("onStartDateChange");
                                                                                                                                                   })
                                                                                                                                                                                                   .Format("dd MMM yyyy")
                                                                                                                                                                                                   .HtmlAttributes(new { required = "Required", @id = "txtenddate", style = "width: 50%; border-radius: 9px;display: inline-block;" })
                        )
                        <button type="button" class="btn btn-success" id="btnProjectEndDate" style="background-color: #00664E;border-color: #00664E;" onclick="SetProjectEndDate(); return false;">Default</button>
                        @*@Html.TextBoxFor(model => model.EndDate, "{0:dd MMM yyyy}", new { @class = "form-control datepicker", @readonly = "readonly", style = "width: 100%; border-radius: 9px;" })*@
                    </td>
                </tr>
                <tr>
                    <td>
                        Project Desc (optional):
                    </td>
                    <td>
                        @Html.TextAreaFor(model => model.ProjectDesc, new { @class = "form-control", style = "width: 100%; border-radius: 9px;" })

                    </td>
                </tr>

            </table>
            <div class="row gutter-top">
                <div class="col-md-3">
                    <h6>Add Project Member</h6>
                </div>
            </div>

            <div class="row">
                <div class="col-md-9">
                    @Html.TextBoxFor(x => x.EmpSearchText, new { @class = "form-control", @style = "width: 100%; border-radius: 9px;", @id = "txtsearch" })
                </div>
                <div class="col-md-3">
                    <button type="button" class="btn btn-primary" style="background-color: #ff7432; border-color:  #ff7432;" onclick="GetEmployeeSearch(); return false;">Search</button>
                </div>
            </div>

            <input type="hidden" id="hidempid" />

            <br />
            <div id="emplist">


                @(Html.Kendo().Grid<SCTimeSheet_DAL.Models.EmployeeSearch>()
                                                                                                                                                               .Name("empsearch")
                                                                                                                                                               .NoRecords(x => x.Template("<div class='empty-grid'></div>"))
                                                                                                                                                               .Columns(columns =>
                                                                                                                                                               {
                                                                                                                                                                   columns.Template(@<text></text>).ClientTemplate("<input type='checkbox' class='checkbox' id='chk#=EmployeeID#' />").Width(40).HeaderTemplate("<input id='headerCheckBox' style='cursor: pointer;' type='checkbox' onclick='selectAllEmpItems(this);' />");
                                                                                                                                                                columns.Bound(p => p.EmpName).ClientTemplate("<input type='button' class='label label-primary' style='width:80%'  value='#=EmpName#' />");
                                                                                                                                                                columns.Bound(p => p.Designation);
                                                                                                                                                                columns.Bound(p => p.Email);
                                                                                                                                                                columns.Bound(p => p.Company);
                                                                                                                                                                columns.Bound(p => p.Department);

                                                                                                                                                            })
                                                                                                  .Pageable()
                                                                                                  .Sortable(x => x.SortMode(GridSortMode.SingleColumn).AllowUnsort(false))
                                                                                                  .Scrollable()



                                                                                                  .DataSource(dataSource => dataSource
                                                                                                      .Ajax()
                                                                                                      .ServerOperation(false)
                                                                                                      .PageSize(20)
                                                                                                      .Read(read => read.Action("GetEmployeeSearch", "ProjectMaster").Data("GetEmpText"))
                                                                                                   )
                                                                                                   .Events(e => e.DataBound("db"))
                )
            </div>


        </div>

        <div>

            <h5 style="font-size: 26px; color: #646464;">
                Project Members
            </h5>
            <br />

            @(Html.Kendo().Grid<SCTimeSheet.Models.EmployeeProjectListUI>()
                                                                                                                                                                                           .Name("projectMemberList")
                                                                                                                                                                                           .NoRecords(x => x.Template("<div class='empty-grid'></div>"))

                                                                                                                                                                                           .Columns(columns =>
                                                                                                                                                                                           {

                                                                                                                                                                                               columns.Bound(p => p.EmpName).Width(250);
                                                                                                                                                                                               columns.Bound(p => p.IsManager).Width(50).Template(@<text></text>).ClientTemplate("#if (data.IsManager == true) " +
                                                                                                                                         "{# <input type='checkbox' checked disabled /> #}" +
                                                                                                                                         "else {# <input type='checkbox'  disabled /> #}#");
                                                                                                                                                                                                columns.Bound(p => p.InvPercentage).Width(100);
                                                                                                                                                                                                columns.Bound(p => p.StartDate).Format("{0:dd MMM yyyy}").Width(150);
                                                                                                                                                                                                columns.Bound(p => p.EndDate).Format("{0:dd MMM yyyy}").Width(150);
                                                                                                                                                                                                columns.ForeignKey(p => p.EmpRole, (System.Collections.IEnumerable)ViewData["RoleList"], "RoleID", "RoleName").Width(150).Hidden(Model.IsRDProject != 1);
                                                                                                                                                                                                columns.Template(p => "").Title("Roles").Width(150).Hidden(Model.IsRDProject == 1).ClientTemplate("");

                                                                                                                                                                                                    columns.Command(command =>
                                                                                                                                                                                                {
                                                                                                                                                                                                     command.Custom("Delete").Visible("deleteVisible").Click("deleteEmp");
                                                                                                                                                                                                 }).Width(50);

                                                                                                                                                                                                })


                                                                                                  .Sortable(x => x.SortMode(GridSortMode.SingleColumn).AllowUnsort(false))
                                                                                                  .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                                                                  .DataSource(dataSource => dataSource
                                                                                                  .Ajax()
                                                                                                  .Model(x =>
                                                                                                  {
                                                                                                      x.Field(y => y.EmpName).Editable(false);
                                                                                                      x.Field(y => y.EmpRole).Editable(false);
                                                                                                  }
                                                                                                  )
                                                                                                      .Batch(true)
                                                                                                      .Model(model => model.Id(p => p.EmployeeID))
                                                                                                      .ServerOperation(false)
                                                                                                      .Update("Editing_Update", "Grid")

                                                                                                      .Read(read => read.Action("GetProjectMember", "ProjectMaster").Data("GetProjectId"))
                                                                                                      //.Destroy(destroy => destroy.Action("RemoveProjectMember", "ProjectMaster"))
                                                                                                      )
            )

            <div style="float:right;margin-top:10px;">
                <button type="button" class="btn btn-primary" style="background-color: #00664E; border-color:  #00664E;" onclick='window.location = "@Url.Action("Index", "ProjectMain")";'>Back</button>


                <button type="button" class="btn btn-primary" style="background-color: #00664E; border-color:  #00664E;" onclick="validateMemberStartDate(true)">Update</button>
                <button type="submit" id="submit-Search" class="btn btn-primary" style="display:none;">Update</button>

            </div>
        </div>


    }

</div>





<script>


    function empRoleEditable(dataItem) {
        return '@Model.IsRDProject' == 1;
    }
    function deleteVisible(dataItem) {
        // hide the Edit button for the item with ProductID=1
        return dataItem.IsNew == true;
    }


   monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    function onGrantChange() {
        var value = $("#drpgrant").val();
        if (value != '' && value != null && value != undefined) {
            $.ajax({
                type: "GET",
                data: { grantId: value },
                url: '@Url.Action("GetThemeList", "ProjectMaster")',
                success: function (data) {
                    if (data == "True") {
                        $("#drpTheme").show();
                        $('#drptheme').attr('required', 'required');
                    } else {
                        $('#drptheme').removeAttr('required');
                        $("#drpTheme").hide();
                    }
                }
            });
        }
        else {
            $('#drptheme').removeAttr('required');
            $("#drpTheme").hide();
        }

    };
    function GetProjectId() {
        return { projectId: $("#ProjectID").val() };
    }
    function db(e) {
        projectMemberGrid = $("#projectMemberList").data("kendoGrid");
        var empdata = projectMemberGrid.dataSource.data();

        empGrid = $("#empSearch").data("kendoGrid");
        var data = projectMemberGrid.dataSource.data();
        for (var i = 0; i < data.length; i++) {
            if (empdata.filter(x => x.EmployeeID == data[i].EmployeeID).length > 0) {
                if ($("#chk" + data[i].EmployeeID).length == 1) {
                    $("#chk" + data[i].EmployeeID).prop("checked", true);
                }
            }
            
        }
    }
    function onStartDateChange() {
        var datepicker = $("#txtenddate").data("kendoDatePicker");

        datepicker.min($("#txtstartdate").val());

        var datepicker1 = $("#memberStartDate").data("kendoDatePicker");

        datepicker1.min($('#txtstartdate').val());
        var datepicker2 = $("#memberEndDate").data("kendoDatePicker");

        datepicker2.min($("#txtstartdate").val());


        if ($("#txtenddate").val() != '') {

            datepicker2.max($('#txtenddate').val());
            datepicker1.max($('#txtenddate').val());
        }
        if ($("#txtstartdate").val() != '' && $("#txtenddate").val() != '') {
            if (Date.parse($("#txtenddate").val()) < Date.parse($("#txtstartdate").val())) {

                datepicker.value($("#txtstartdate").val());
            }
        }
    }
    function SetProjectStartDate() {
        var todayDate = kendo.toString(kendo.parseDate(new Date()), 'dd MMM yyyy');
        $("#txtstartdate").data("kendoDatePicker").value(todayDate);
        var datepicker = $("#txtenddate").data("kendoDatePicker");

        datepicker.min(todayDate);

        if ($("#txtstartdate").val() != '' && $("#txtenddate").val() != '') {
            if (Date.parse($("#txtenddate").val()) < Date.parse($("#txtstartdate").val())) {

                datepicker.value($("#txtstartdate").val());
            }
        }

    }

    function SetProjectEndDate() {
        var endDate = kendo.toString(kendo.parseDate(new Date(2099, 11, 31)), 'dd MMM yyyy');
        $("#txtenddate").data("kendoDatePicker").value(endDate);
        var datepicker = $("#txtenddate").data("kendoDatePicker");

        datepicker.min(todayDate);

        if ($("#txtstartdate").val() != '' && $("#txtenddate").val() != '') {
            if (Date.parse($("#txtenddate").val()) < Date.parse($("#txtstartdate").val())) {

                datepicker.value($("#txtstartdate").val());
            }
        }
    }
    function GetSelectedItem() {
        var value = $("#Rbtest:checked").val();
        if (value == 2) {
            $('#row1').hide();
            $('#row2').hide();
         
        }
        else {
            $('#row1').show();
            $('#row2').show();
            $('#research').attr('required', 'required');
            $('#type').attr('required', 'required');
           
        }

       

    }

    function GetProjectStartDate() {
        const startDate = new Date($('#txtstartdate').val());
        $('#StartDate').val(startDate);
        grid = $("#projectMemberList").data("kendoGrid");
        dataItem = grid.dataItem($("tr.k-grid-edit-row"));
        dataItem.set("StartDate", startDate);
        onMemberStartDateChange();
    }

    function validateMemberStartDate(submit = false) {

        projectMemberGrid = $("#projectMemberList").data("kendoGrid");
        var data = projectMemberGrid.dataSource.data();
        var dirty = $.grep(data, function (item) {
            return item.dirty || item.IsNew;
        });
        console.log(dirty);
        let errMessage = '';
        for (var i = 0; i < dirty.length; i++) {
            let selectedDate = new Date(dirty[i].StartDate);
            let joinDate = new Date(dirty[i].JoinDate);
            if (joinDate > selectedDate) {
                let dateFormatted = joinDate.getDate() + "-"
                    + monthNames[(joinDate.getMonth())] + "-"
                    + joinDate.getFullYear();
                errMessage = errMessage + "\n\nEmployee " + dirty[i].EmpName + " join date is " + dateFormatted + ", Please input member start date from " + dateFormatted + " onwards";
            }

            if (dirty[i].EndDate == null || dirty[i].EndDate == undefined) {
                errMessage = errMessage + "\n\Please select end date for  " + dirty[i].EmpName;
            }

        }
        if (errMessage != '') {
            alert(errMessage);
        }
        if (submit && errMessage == '') {
            let items = [];
            if (dirty.length > 0) {
                let empIds = dirty.map(x => x.EmployeeID);
                $.ajax({
                    type: "POST",
                    data: { projectId: @Model.ProjectID , empIds: empIds },
                    url: '@Url.Action("checkInvolvementPercentage", "ProjectMaster")',
                    success: function (data) {
                        console.log(data);
                        for (var i = 0; i < data.length; i++) {
                            if ((dirty[i].InvPercentage + (data[i].currentInvolvement == null ? 0 : data[i].currentInvolvement)) > data[i].totalInvolvement) {
                                errMessage = errMessage + "Employee " + dirty[i].EmpName + " has exceeded the maximum allocation , current allocation is " + data[i].currentInvolvement + " , maximum allocation is " + data[i].totalInvolvement + " and Available allocation is " + (data[i].totalInvolvement - (data[i].currentInvolvement == null ? 0 : data[i].currentInvolvement)) + " \n \n";
                            } else {
                                items.push({
                                    EmployeeID: dirty[i].EmployeeID,
                                    EmpName: dirty[i].EmpName,
                                    IsManager: dirty[i].IsManager,
                                    InvPercentage: dirty[i].InvPercentage,
                                    StartDate: dirty[i].StartDate,
                                    EndDate: dirty[i].EndDate,
                                    RoleID: dirty[i].RoleID,
                                    ProjectId: '@Model.ProjectID',
                                    IsRDProject: '@Model.IsRDProject'
                                });
                            }
                        }
                        if (errMessage != '') {
                            alert(errMessage);
                        } else {
                            $("#EmployeeProjectList").val(JSON.stringify(items));
                            $("#submit-Search").click();
                        }

                    }


                });
            }
            else {
                $("#EmployeeProjectList").val(JSON.stringify(items));
                $("#submit-Search").click();
            }
        }
        }

    function onMemberStartDateChange(e) {
        let selectedDate = new Date($('#StartDate').val());
        let errMessage = '';
        grid = $("#projectMemberList").data("kendoGrid");
        dataItem = grid.dataItem($("tr.k-grid-edit-row"));
        let joinDate = new Date(dataItem.JoinDate);

        if (joinDate > selectedDate) {
            let dateFormatted = joinDate.getDate() + "-"
                + monthNames[(joinDate.getMonth())] + "-"
                + joinDate.getFullYear();
            errMessage = errMessage + "\n\nEmployee " + dataItem.EmpName + " join date is " + dateFormatted + ", Please input member start date from " + dateFormatted + " onwards";
            dataItem.set("StartDate", joinDate);
           var datepicker = $("#StartDate").data("kendoDatePicker");

            datepicker.min(joinDate);

        }

        if (errMessage != '') {
            if (e != undefined && e != null) {
                e.preventDefault();
            }
            alert(errMessage);
        }
    }


    function GetProjectEndDate() {
        const endDate = new Date($('#txtenddate').val());
        $('#EndDate').val(endDate);
        grid = $("#projectMemberList").data("kendoGrid");
        dataItem = grid.dataItem($("tr.k-grid-edit-row"));
        dataItem.set("EndDate", endDate);
    }

    $(document).ready(function () {

        $("#txtsearch").val("");

        var mes = '@ViewBag.Message';
        if (mes != "" && mes != null && mes != undefined) {
            pattern = "line";
            mes = mes.replace(new RegExp(pattern, "g"), '\n')
            alert(mes);
        }

        $('#promaster').css('color', 'black');

        $('#admin').css('color', 'black');

        if ($('#txtsearch').val() == "" || $('#txtsearch').val() == null || $('#txtsearch').val() == undefined) {
            $('#emplist').hide();
        }
        else {
            GetEmployeeSearch();
        }


        if ($("#IsRDProject").val() != "1") {
            $('#row1').hide();
            $('#row2').hide();

        }

        $(".k-datepicker").find('span').find('input').attr("readonly", "readonly");


        onGrantChange();

    });


    function selectRow() {
        row = $(this).closest("tr");
        grid = $("#empsearch").data("kendoGrid");
        dataItem = grid.dataItem(row);
        projectMemberGrid = $("#projectMemberList").data("kendoGrid");
        if (projectMemberGrid) {
            if (this.checked) {
                //this logic creates a new item in the datasource/datagrid
                var dataSource = projectMemberGrid.dataSource;
                if (dataSource._data.filter(x => x.EmployeeID == dataItem.EmployeeID).length == 0) {
                    @*if ('@Model.IsRDProject' == 1) {
                        dataSource.insert(0, { EmpName: dataItem.EmpName, EmployeeID: dataItem.EmployeeID, IsManager: false, InvPercentage: 0, EmpRole: dataItem.RoleID, IsNew: true, JoinDate: dataItem.JoinDate, StartDate: dataItem.JoinDate });
                    }
                    else {
                        dataSource.insert(0, { EmpName: dataItem.EmpName, EmployeeID: dataItem.EmployeeID, IsManager: false, InvPercentage: 0, EmpRole: null, IsNew: true, JoinDate: dataItem.JoinDate, StartDate: dataItem.JoinDate });
                    }*@
                    dataSource.insert(0, { EmpName: dataItem.EmpName, EmployeeID: dataItem.EmployeeID, IsManager: false, InvPercentage: 0, EmpRole: dataItem.RoleID, IsNew: true, JoinDate: dataItem.JoinDate, StartDate: dataItem.JoinDate });

                   dataSource.page(dataSource.totalPages());
                    projectMemberGrid.editRow(projectMemberGrid.tbody.children().first());
                }

            }
            else {
                let item = projectMemberGrid.dataSource._data.filter(x => x.EmployeeID == dataItem.EmployeeID)[0];
                projectMemberGrid.dataSource.remove(item);

            }

        }

    }

    function AddEmp() {
        row = $(this).closest("tr");
        grid = $("#empsearch").data("kendoGrid");
        dataItem = grid.dataItem(row);
        projectMemberGrid = $("#projectMemberList").data("kendoGrid");
        if (projectMemberGrid) {
            //this logic creates a new item in the datasource/datagrid
            var dataSource = projectMemberGrid.dataSource;
            if (dataSource._data.filter(x => x.EmployeeID == dataItem.EmployeeID).length == 0) {
                @*if ('@Model.IsRDProject' == 1) {
                        dataSource.insert(0, { EmpName: dataItem.EmpName, EmployeeID: dataItem.EmployeeID, IsManager: false, InvPercentage: 0, EmpRole: dataItem.RoleID, IsNew: true, JoinDate: dataItem.JoinDate, StartDate: dataItem.JoinDate });
                    }
                    else {
                        dataSource.insert(0, { EmpName: dataItem.EmpName, EmployeeID: dataItem.EmployeeID, IsManager: false, InvPercentage: 0, EmpRole: null, IsNew: true, JoinDate: dataItem.JoinDate, StartDate: dataItem.JoinDate });
                }*@

                dataSource.insert(0, { EmpName: dataItem.EmpName, EmployeeID: dataItem.EmployeeID, IsManager: false, InvPercentage: 0, EmpRole: dataItem.RoleID, IsNew: true, JoinDate: dataItem.JoinDate, StartDate: dataItem.JoinDate });


                if ($("#chk" + dataItem.EmployeeID).length == 1) {
                    $("#chk" + dataItem.EmployeeID).prop("checked", true);
                }

                 dataSource.page(dataSource.totalPages());
                projectMemberGrid.editRow(projectMemberGrid.tbody.children().first());
            }
        }

    }

    function deleteEmp(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        grid = $("#projectMemberList").data("kendoGrid");

        grid.dataSource.remove(dataItem);

        if ($("#chk" + dataItem.EmployeeID).length == 1) {
            $("#chk" + dataItem.EmployeeID).prop("checked", false);
        }


    }

    function GetEmpText() {
        var searchtext = $('#txtsearch').val();
        return { searchtext: searchtext }
    }

    function selectAllEmpItems(headerCheckBox) {

        var grid = $("#empsearch").data("kendoGrid");
        var items = grid.dataSource.view();

        projectMemberGrid = $("#projectMemberList").data("kendoGrid");

        if (!headerCheckBox.checked) {
            for (var i = 0; i < items.length; i++) {
                var dataSource = projectMemberGrid.dataSource;
                if (projectMemberGrid.dataSource._data.filter(x => x.EmployeeID == items[i].EmployeeID).length > 0) {
                    dataItem = projectMemberGrid.dataSource._data.filter(x => x.EmployeeID == items[i].EmployeeID)[0];
                    if (dataSource._data.filter(x => x.EmployeeID == dataItem.EmployeeID).length > 0) {
                        projectMemberGrid.dataSource.remove(dataItem);
                    }
                }

            }
        }
        else {

            for (var i = 0; i < items.length; i++) {
                var dataSource = projectMemberGrid.dataSource;
                dataItem = items[i];


                if (dataSource._data.filter(x => x.EmployeeID == dataItem.EmployeeID).length == 0) {
                    @*if ('@Model.IsRDProject' == 1) {
                        dataSource.insert(0, { EmpName: dataItem.EmpName, EmployeeID: dataItem.EmployeeID, IsManager: false, InvPercentage: 0, EmpRole: dataItem.RoleID, IsNew: true, JoinDate: dataItem.JoinDate, StartDate: dataItem.JoinDate });
                    }
                    else {
                        dataSource.insert(0, { EmpName: dataItem.EmpName, EmployeeID: dataItem.EmployeeID, IsManager: false, InvPercentage: 0, EmpRole: null, IsNew: true, JoinDate: dataItem.JoinDate, StartDate: dataItem.JoinDate });
                    }*@

                    dataSource.insert(0, { EmpName: dataItem.EmpName, EmployeeID: dataItem.EmployeeID, IsManager: false, InvPercentage: 0, EmpRole: dataItem.RoleID, IsNew: true, JoinDate: dataItem.JoinDate, StartDate: dataItem.JoinDate });

                    dataSource.page(dataSource.totalPages());
                }


            }

        }


        $(".checkbox").each(function () {
            this.checked = headerCheckBox.checked;
        })
    }



        function GetEmployeeSearch() {

        $('#emplist').show();
            $("#empsearch").data().kendoGrid.dataSource.read();
            $("#empsearch").css("display", "block");
            $("#headerCheckBox").prop('checked', false);
            $("#empsearch").data().kendoGrid.table.on("click", ".checkbox", selectRow);
            $("#empsearch").data().kendoGrid.table.on("click", ".label", AddEmp);
    }


</script>





